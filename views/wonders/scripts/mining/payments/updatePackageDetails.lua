---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by fbanna.
--- DateTime: 10/7/25 10:43â€¯AM
---
local pp = require('views.utils.prettyPrinter')
local conversions=require('views.utils.conversions')
local conversionRate=conversions.getConversionRate()
--[[
    Here we should get the package price of that index
    EDS Grade
    Stage2 Bonus
    Return Multiplier
    Maximum Return
]]
local StageMultiplier = 1.8
local calculatePackageEDS = function(price, StageMultiplier)
    local sM = StageMultiplier or 1.8
    return price * sM
end
local calculateMaximumReturn = function(PackageEDS, multiplier)
    return PackageEDS * multiplier
end
local calculateStageBonus = function(price)
    return price * 0.8
end
local mapping = {
    ["101"] = {
        ["name"] = "Miner Sentinel",
        ["grade"] = "C-",
        ["price"] = 100,
        ["multiplier"] = 2.0
    },
    ["102"] = {
        ["name"] = "ASIC Alchemist",
        ["grade"] = "C",
        ["price"] = 300,
        ["multiplier"] = 2.5
    },
    ["103"] = {
        ["name"] = "Bit Bulldozer",
        ["grade"] = "C+",
        ["price"] = 500,
        ["multiplier"] = 3.0,
    },
    ["104"] = {
        ["name"] = "Hash Forge",
        ["grade"] = "C++",
        ["price"] = 1000,
        ["multiplier"] = 3.5,

    },
    ["105"] = {
        ["name"] = "Crypto Digger",
        ["grade"] = "B-",
        ["price"] = 2500,
        ["multiplier"] = 4.0,
    },
    ["106"] = {
        ["name"] = "Minor Maven",
        ["grade"] = "B",
        ["price"] = 5000,
        ["multiplier"] = 4.5,
    },
    ["107"] = {
        ["name"] = "Node Navigator",
        ["grade"] = "B+",
        ["price"] = 10000,
        ["multiplier"] = 5.0,
    },
    ["108"] = {
        ["name"] = "Hash Harvester",
        ["grade"] = "B++",
        ["price"] = 15000,
        ["multiplier"] = 6.0,
    },
    ["109"] = {
        ["name"] = "Coin Crafter",
        ["grade"] = "A-",
        ["price"] = 20000,
        ["multiplier"] = 7.0,
    },
    ["110"] = {
        ["name"] = "Rig Master",
        ["grade"] = "A",
        ["price"] = 30000,
        ["multiplier"] = 8.0,
    },
    ["111"] = {
        ["name"] = "Block Commander",
        ["grade"] = "A+",
        ["price"] = 50000,
        ["multiplier"] = 9.0,
    },
    ["112"] = {
        ["name"] = "Hashrate Hero",
        ["grade"] = "A++",
        ["price"] = 100000,
        ["multiplier"] = 10.0,
    }
}

local idxs = eocto.getQueryParams()
local idx = nil
if idxs["id"] ~= nil then
    idx = idxs["id"]
end
local CurrentEDS = mapping[tostring(101 + tonumber(idx))]
if CurrentEDS ~= nil then
    CurrentEDS["packageEDS"] = calculatePackageEDS(CurrentEDS["price"],StageMultiplier)
    CurrentEDS["bonus"] = calculateStageBonus(CurrentEDS["price"])
    CurrentEDS["maximumReturn"] = calculateMaximumReturn(CurrentEDS["packageEDS"],CurrentEDS["multiplier"])
end
--print(idx)
pp.print(CurrentEDS)
eocto.setLocal("eds",CurrentEDS)
eocto.setSession("package",CurrentEDS)

-- updating membership and total to be paid
local membership = eocto.getSession("membership") or 0
local toBePaid=(CurrentEDS["price"] + 5 + membership) * 1.0153 * conversionRate
local bridgeFees = toBePaid*0.005
local swapFees = bridgeFees*0.01
local totalFees = conversions.convertUSDToeAI(conversionRate,bridgeFees+swapFees) + membership
eocto.setLocal("toBePaid",toBePaid)
eocto.setLocal("bridgeFees",bridgeFees)
eocto.setLocal("swapFees",swapFees)
eocto.setLocal("totalFees",totalFees)

