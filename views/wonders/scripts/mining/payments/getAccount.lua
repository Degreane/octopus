---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by fbanna.
--- DateTime: 10/1/25 2:48â€¯PM
---

--[[
 by default membership is not defined
--]]
eocto.setSession("membership", 0)
eocto.setSession("membershipPeriod", "")

local pp = require('views.utils.prettyPrinter')
local conversions = require('views.utils.conversions')

local tronutils = require('views.utils.utilstron')
local egetyutils = require("views.utils.egetyutils")


-- Get the reques eid Param
local queryParams = eocto.getQueryParams()
local eid=eocto.getQueryParams()["eid"] or nil
--if queryParams ~= nil and queryParams["eid"] then
--    eid = queryParams["eid"]
--end
local walletInfo = nil
local egetyUser = nil
if eid ~= nil then
    walletInfo = conversions.getAssets(eid)
    egetyUser = egetyutils.getUserWallet(eid)
end
local conversionRate = conversions.getConversionRate()
if walletInfo ~= nil and walletInfo["egetyAddress"] ~= nil then

    walletInfo["conversionRate"] = conversionRate
    --pp.print(walletInfo)
    local trxInUSDT = conversions.trxToUSD(walletInfo.trx)
    --need to get trxFees
    local trxFees = {"estimatedFees","8"}
    if egetyUser ~= nil then
        trxFees = tronutils.estimateTxTrc20Fees(tronutils.Trc20ContractAddress,walletInfo["trc20Address"],100,egetyUser["pkey"]) or eocto.encodeJSON({"estimatedFees","8"})
        trxFees=eocto.decodeJSON(trxFees)
    end
    local trxEstimatedFees=tonumber(trxFees["estimatedFees"])
    print()
    --local
    --pp.print(trxInUSDT)
    walletInfo["trxEAI"] = conversions.convertUSDToeAI(conversionRate,trxInUSDT)
    walletInfo["usdtEAI"] = conversions.convertUSDToeAI(conversionRate,walletInfo["usdt"])
    walletInfo["egetyEAI"] = conversions.convertEgetyToEAi(conversionRate,walletInfo["eEgety"])
    walletInfo["trxFees"] = trxEstimatedFees
    --eocto.setSession("trxFees",trxEstimatedFees)

    if walletInfo["trx"] > walletInfo["trxFees"] then
        walletInfo["needsTrx"] = false
    else
        walletInfo["needsTrx"] = true
    end

    --print(string.format("TRX Fees %s",trxEstimatedFees))
    --pp.print(walletInfo)
    eocto.setLocal("walletInfo",walletInfo)
    eocto.setSession("walletInfo",walletInfo)
end
local trx2usd = conversions.getTrxPrice()
local ecosystem= {
    egety2usd = conversions.convertEgetyToUSD(1,1),
    egety2eai = conversions.convertEgetyToEAi(conversionRate,1),
    trx2usd = conversions.getTrxPrice(),
    trx2eai = conversions.convertUSDToeAI(conversionRate,trx2usd),
    eai2usd = conversions.convertEaiToUSD(conversionRate,1)
}
local mintingFees=conversions.convertEaiToEgety(conversionRate,1)
local transactionFees=conversions.convertEaiToEgety(conversionRate,0.02)
local automationFee = conversions.convertEaiToEgety(conversionRate,0.05)
local insuranceFee = 1
--pp.print(ecosystem)
eocto.setLocal("ecosystem",ecosystem)
eocto.setLocal("mintingFees",mintingFees)
eocto.setLocal("transactionFees",transactionFees)
eocto.setLocal("automationFees",automationFee)
eocto.setLocal("insuranceFees",insuranceFee)